{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Topic#13","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPtrm4vjthUN7mOvMSHEUxn"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"a_AyuMdaTDD-"},"outputs":[],"source":["## Topic 13\n","\n","## Remember Numpy Arrays?"]},{"cell_type":"code","source":["import numpy\n","\n","a = numpy.array([])\n","## There or either attributes/properties or methods in this CLASS (using shift or tab)\n","a.mean()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":397},"id":"J3DDcRF2Wy-t","executionInfo":{"status":"error","timestamp":1650985333921,"user_tz":420,"elapsed":8,"user":{"displayName":"GameMusicEnthusiast","userId":"15069885440578359632"}},"outputId":"ac9064da-81d1-4acb-941c-69bd60e8ff00"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AxisError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAxisError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-4-06a6054953a2>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m## There or either attributes/properties or methods in this CLASS (using shift or tab)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/numpy/core/_methods.py\u001b[0m in \u001b[0;36m_mean\u001b[0;34m(a, axis, dtype, out, keepdims, where)\u001b[0m\n\u001b[1;32m    165\u001b[0m     \u001b[0mis_float16_result\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    166\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 167\u001b[0;31m     \u001b[0mrcount\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_count_reduce_items\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeepdims\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkeepdims\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwhere\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mwhere\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    168\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mrcount\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mwhere\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mTrue\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mumr_any\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrcount\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    169\u001b[0m         \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwarn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Mean of empty slice.\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mRuntimeWarning\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/numpy/core/_methods.py\u001b[0m in \u001b[0;36m_count_reduce_items\u001b[0;34m(arr, axis, keepdims, where)\u001b[0m\n\u001b[1;32m     74\u001b[0m         \u001b[0mitems\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0max\u001b[0m \u001b[0;32min\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 76\u001b[0;31m             \u001b[0mitems\u001b[0m \u001b[0;34m*=\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmu\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnormalize_axis_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0max\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     77\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     78\u001b[0m         \u001b[0;31m# TODO: Optimize case when `where` is broadcast along a non-reduction\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAxisError\u001b[0m: axis 1 is out of bounds for array of dimension 1"]}]},{"cell_type":"code","source":["class EnthusiasticStudent:\n","    '''\n","    Obv we'll include a nice comment at the top of the class to explain what it's for... right?!\n","\n","    This EnthusiasticStudent is being used to demonstrate how we can create our own Objects.\n","\n","    It's going to have a few attributes and some simple functions.\n","    '''\n","\n","    def __init__(self, first_name='John', last_name='Doe', student_num='000000000', current_avg=0):\n","        '''\n","        So the above line of code is the special words for python that means CONSTRUCTOR\n","        Notice that it has parentheses, and a parameter called *self*\n","        Self is a special variable thing that is a reference to... itself...\n","        '''\n","        # Let's just set attributes for now\n","        self.first_name = first_name\n","        self.last_name = last_name\n","        self.student_num = student_num\n","        self.current_avg = current_avg\n","        \n","    def __repr__(self):\n","      '''\n","      A method which will return some string representation of the object. This will he handy for debugging and stuff.\n","      '''\n","      return 'First Name: ' + self.first_name + '\\nlast_name: ' + self.last_name + '\\nStudent Number: ' + self.student_num + '\\nCurrent Average: ' + str(self.current_avg)\n","\n","    def __eq__(self, anotherThing):\n","      '''\n","      A method to check if 2 EnthusiasticStudent are the same. What does it mean for 2 things to be the same?\n","      Well, WE get to make that up!\n","      (Although, we should pick something that makes sense...)\n","      '''\n","      return self.student_num == anotherThing.student_num\n","\n","    def ask_for_higher_mark(self, howHigh):\n","        print('Hello Professor,\\n\\nMy name is ' + self.first_name + ' and I am in your CSCI 161 class. I would really like it if you could just give me a ' + str(howHigh) + '%. \\n\\nThanks,\\n' + self.first_name + ' ' + self.last_name)\n","\n","    def show_off(self):\n","        print('I got 100 on my last assignment everyone. I\\'m a wizard')\n","        self.first_name = 'Wizard'\n","\n","\n","    def work_too_hard_on_assignment(self):\n","        # I left it blank. Add whatever code you want here. Be sure to delete the pass keyword when you do though\n","        pass\n"],"metadata":{"id":"v9esvEPiZ-8g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["## Testing the class\n","## 1 Figure out how to get the first name\n","## from EnthusiasticStudent import * (only used for multiple files)\n","a_student = EnthusiasticStudent()\n","a_student.first_name = \"Frank\"\n","\n","print(a_student.first_name)\n","\n","## 2 what is the type of a_student, EnthusiasticStudent, and EnthusiasticStudent()\n","print(type(a_student))\n","print(type(EnthusiasticStudent))\n","print(type(EnthusiasticStudent()))\n","\n","## it should print out __main__, type, and __main__\n","## print functions in init will always print the function before it starts, \n","## and after it runs, and will run a few times\n","##Calling functions\n","b = EnthusiasticStudent()\n","b.ask_for_higher_mark(90)\n","\n","## What happens to the attributes after calling show_off, which changes the variable\n","b.show_off()\n","b.ask_for_higher_mark(90)\n","\n","## It changes the variables!! through the py file\n","## calling repr\n","\n","b.__repr__()\n","print(b)\n","a = str(b)\n","print(type(b))\n","## Still the class of __main__\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zt2JD0iob1rf","executionInfo":{"status":"ok","timestamp":1650988306368,"user_tz":420,"elapsed":5,"user":{"displayName":"GameMusicEnthusiast","userId":"15069885440578359632"}},"outputId":"29f84690-c81b-4a03-da2d-d659d12d2066"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Frank\n","<class '__main__.EnthusiasticStudent'>\n","<class 'type'>\n","<class '__main__.EnthusiasticStudent'>\n","Hello Professor,\n","\n","My name is John and I am in your CSCI 161 class. I would really like it if you could just give me a 90%. \n","\n","Thanks,\n","John Doe\n","I got 100 on my last assignment everyone. I'm a wizard\n","Hello Professor,\n","\n","My name is Wizard and I am in your CSCI 161 class. I would really like it if you could just give me a 90%. \n","\n","Thanks,\n","Wizard Doe\n","First Name: Wizard\n","last_name: Doe\n","Student Number: 000000000\n","Current Average: 0\n","<class '__main__.EnthusiasticStudent'>\n"]}]},{"cell_type":"code","source":["## Creating two instances of EnthusasticStuden\n","c = EnthusiasticStudent()\n","d = EnthusiasticStudent()\n","c == d\n","## Currently false, but when adding __eq__ to the class...\n","## Its true, because we took self, and the other parameter returned == to the other\n","c.__eq__(d)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-St1aAndmAYf","executionInfo":{"status":"ok","timestamp":1650988882539,"user_tz":420,"elapsed":946,"user":{"displayName":"GameMusicEnthusiast","userId":"15069885440578359632"}},"outputId":"80077a2c-6136-4575-b13f-abdc99968c0f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":39}]}]}